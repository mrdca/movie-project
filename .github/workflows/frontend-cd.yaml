name: Movie Project - Frontend - CD

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

jobs:
  npm:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Dependencies
      run: |
        cd starter/frontend
        npm ci
    
  
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Dependencies
      run: |
        cd starter/frontend
        npm install

    - name: Install ESLint
      run: |
        cd starter/frontend
        npm install eslint --save-dev
        
    - name: Lint Code
      run: |
        cd starter/frontend
        npm run lint

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Dependencies
      run: |
        cd starter/frontend
        npm ci

    - name: Run Tests
      run: |
        cd starter/frontend
        npm test

    - name: Simulate running tests
      run: |
        cd starter/frontend
        CI=true npm test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]  # This ensures 'build' only runs if 'lint' and 'test' jobs succeed

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Dependencies
      run: |
        cd starter/frontend
        npm ci
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
  
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
  
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 633011985446.dkr.ecr.us-east-1.amazonaws.com
          cd starter/frontend/
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t frontend .
          docker tag frontend:latest 633011985446.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
          docker push 633011985446.dkr.ecr.us-east-1.amazonaws.com/frontend:latest

    - name: Install kubectl
      run: |
        curl -sLO https://storage.googleapis.com/kubernetes-release/release/v1.19.9/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/
    
    - name: Check kubectl version
      run: kubectl version --client
        
    - name: Display kubectl help
      run: kubectl help
    
    - name: Install Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    

    - name: Check Kustomize version
      run: kustomize version

    - name: Update AWS CLI
      run: |
        sudo apt-get install -y awscli
        aws --version
  

    - name: Add AWS EKS cluster to kubeconfig
      run: |
        # Specify AWS EKS cluster details
        AWS_REGION=us-east-1
        EKS_CLUSTER_NAME=cluster

        # Set the path for the kubeconfig file
        KUBECONFIG_PATH=/home/runner/.kube/config

        # Update kubeconfig with AWS EKS cluster
        aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME} --kubeconfig $KUBECONFIG_PATH
        

        # Display the updated kubeconfig content (optional, for verification)
        cat $KUBECONFIG_PATH

      env:
        KUBECONFIG: /home/runner/.kube/config

    - name: Check kubectl commands
      run: kubectl get pods

    - name: Deploy to EKS
      run: |
        cd starter/frontend/k8s
        kustomize edit set image frontend=633011985446.dkr.ecr.us-east-1.amazonaws.com/frontend:latest


    - name: Apply the manifests to the cluster
      run: |
        cd starter/frontend/k8s
        kustomize build | kubectl apply -f - --validate=false
