name: Movie Project - Frontend - CD

on:
  push:  # Trigger the workflow on push events to the main branch in the specified directory
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  npm:  # Job for npm related tasks
    runs-on: ubuntu-latest  # Execute on the latest version of Ubuntu

    steps:  # Steps to be executed in the npm job
    - name: Checkout Repository  # Step to checkout the repository
      uses: actions/checkout@v4  # Use the GitHub Action to checkout the repository

    - name: Set up Node.js  # Step to set up Node.js
      uses: actions/setup-node@v3  # Use the GitHub Action to set up Node.js
      with:
        node-version: '18'  # Specify Node.js version to use

    - name: Install Dependencies  # Step to install project dependencies
      run: |
        cd starter/frontend  # Change directory to the frontend directory
        npm ci  # Install dependencies with exact versions for production

  lint:  # Job for linting the code
    runs-on: ubuntu-latest  # Execute on the latest version of Ubuntu

    steps:  # Steps to be executed in the lint job
    - name: Checkout Repository  # Step to checkout the repository
      uses: actions/checkout@v4  # Use the GitHub Action to checkout the repository

    - name: Set up Node.js  # Step to set up Node.js
      uses: actions/setup-node@v3  # Use the GitHub Action to set up Node.js
      with:
        node-version: '18'  # Specify Node.js version to use

    - name: Install Dependencies  # Step to install project dependencies
      run: |
        cd starter/frontend  # Change directory to the frontend directory
        npm install  # Install project dependencies

    - name: Install ESLint  # Step to install ESLint
      run: |
        cd starter/frontend  # Change directory to the frontend directory
        npm install eslint --save-dev  # Install ESLint as a development dependency
        
    - name: Lint Code  # Step to lint the code using ESLint
      run: |
        cd starter/frontend  # Change directory to the frontend directory
        npm run lint  # Run ESLint to lint the code

  test:  # Job for running tests
    runs-on: ubuntu-latest  # Execute on the latest version of Ubuntu

    steps:  # Steps to be executed in the test job
    - name: Checkout Repository  # Step to checkout the repository
      uses: actions/checkout@v4  # Use the GitHub Action to checkout the repository

    - name: Set up Node.js  # Step to set up Node.js
      uses: actions/setup-node@v3  # Use the GitHub Action to set up Node.js
      with:
        node-version: '18'  # Specify Node.js version to use

    - name: Install Dependencies  # Step to install project dependencies
      run: |
        cd starter/frontend  # Change directory to the frontend directory
        npm ci  # Install dependencies with exact versions for production

    - name: Run Tests  # Step to run tests
      run: |
        cd starter/frontend  # Change directory to the frontend directory
        npm test  # Run tests
        
    - name: Simulate running tests  # Step to simulate running tests with CI environment variable set to true
      run: |
        cd starter/frontend  # Change directory to the frontend directory
        CI=true npm test  # Run tests with CI environment variable set to true

  build:  # Job for building and deploying the application
    runs-on: ubuntu-latest  # Execute on the latest version of Ubuntu
    needs: [lint, test]  # This ensures 'build' only runs if 'lint' and 'test' jobs succeed

    steps:  # Steps to be executed in the build job
    - name: Checkout Repository  # Step to checkout the repository
      uses: actions/checkout@v4  # Use the GitHub Action to checkout the repository
    
    - name: Set up Node.js  # Step to set up Node.js
      uses: actions/setup-node@v3  # Use the GitHub Action to set up Node.js
      with:
        node-version: '18'  # Specify Node.js version to use

    - name: Install Dependencies  # Step to install project dependencies
      run: |
        cd starter/frontend  # Change directory to the frontend directory
        npm ci  # Install dependencies with exact versions for production
    
    - name: Configure AWS credentials  # Step to configure AWS credentials for pushing Docker image to ECR
      uses: aws-actions/configure-aws-credentials@v4  # Use AWS Actions to configure AWS credentials
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Access key ID from GitHub Secrets
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secret access key from GitHub Secrets
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  # Session token from GitHub Secrets
        aws-region: us-east-1  # Specify the AWS region

    - name: Login to Amazon ECR  # Step to log in to Amazon ECR
      id: login-ecr  # Unique identifier for this step
      uses: aws-actions/amazon-ecr-login@v2  # Use AWS Actions to perform ECR login

    - name: Build, tag, and push image to Amazon ECR  # Step to build, tag, and push Docker image to Amazon ECR
    env:  # Define environment variables for the step
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # Get ECR registry from previous step
      ECR_REPOSITORY: frontend  # Name of the ECR repository
      IMAGE_TAG: ${{ github.sha }}  # GitHub commit SHA as the image tag
    run: |  # Define the shell commands to be executed
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 633011985446.dkr.ecr.us-east-1.amazonaws.com  # Log in to ECR
        cd starter/frontend/  # Change directory to the frontend directory
        docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t frontend .  # Build Docker image
        docker tag frontend:latest 633011985446.dkr.ecr.us-east-1.amazonaws.com/frontend:latest  # Tag Docker image
        docker push 633011985446.dkr.ecr.us-east-1.amazonaws.com/frontend:latest  # Push Docker image to ECR

    - name: Check if Docker image is uploaded to ECR
    run: |  # Check if the Docker image exists in ECR
        if aws ecr describe-images --repository-name frontend | grep -q "imageTag\": \"latest\""; then
          echo "Docker image uploaded to ECR"
        else
          echo "Docker image not uploaded to ECR, failing pipeline"
          exit 1
        fi
          
    - name: Install kubectl  # Step to install kubectl
    run: |  # Define the shell command to be executed
      curl -sLO https://storage.googleapis.com/kubernetes-release/release/v1.19.9/bin/linux/amd64/kubectl  # Download kubectl binary
      chmod +x ./kubectl  # Make kubectl binary executable
      sudo mv ./kubectl /usr/local/bin/  # Move kubectl binary to a directory in PATH

    - name: Check kubectl version  # Step to check kubectl version
    run: kubectl version --client  # Display kubectl version

    - name: Display kubectl help  # Step to display kubectl help
    run: kubectl help  # Display kubectl help information

    - name: Install Kustomize  # Step to install Kustomize
    run: |  # Define the shell command to be executed
      curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash  # Download and install Kustomize
      sudo mv kustomize /usr/local/bin/  # Move Kustomize binary to a directory in PATH

    - name: Check Kustomize version  # Step to check Kustomize version
    run: kustomize version  # Display Kustomize version

    - name: Update AWS CLI  # Step to update AWS CLI
    run: |  # Define the shell command to be executed
      sudo apt-get install -y awscli  # Install AWS CLI
      aws --version  # Display AWS CLI version

    - name: Add AWS EKS cluster to kubeconfig  # Step to add AWS EKS cluster to kubeconfig
    run: |  # Define the shell command to be executed
      AWS_REGION=us-east-1  # Specify AWS region
      EKS_CLUSTER_NAME=cluster  # Specify EKS cluster name
      KUBECONFIG_PATH=/home/runner/.kube/config  # Specify kubeconfig file path
      aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME} --kubeconfig $KUBECONFIG_PATH  # Add EKS cluster to kubeconfig
      cat $KUBECONFIG_PATH  # Display updated kubeconfig content for verification
    env:  # Define environment variables for the step
      KUBECONFIG: /home/runner/.kube/config  # Specify kubeconfig file path as an environment variable

    - name: Check kubectl commands  # Step to check kubectl commands
    run: kubectl get pods  # Display pods in the Kubernetes cluster

    - name: Deploy to EKS  # Step to deploy to EKS
    run: |  # Define the shell command to be executed
      cd starter/frontend/k8s  # Change directory to the Kubernetes manifests directory
      kustomize edit set image frontend=633011985446.dkr.ecr.us-east-1.amazonaws.com/frontend:latest  # Update Docker image in Kubernetes manifest
    
    - name: Apply the manifests to the cluster  # Step to apply Kubernetes manifests to the cluster
      run: |
        cd starter/frontend/k8s  # Change directory to the Kubernetes manifest directory
        kustomize build | kubectl apply -f - --validate=false  # Build and apply Kubernetes manifests, skipping validation

    - name: Get pod status
    id: get_pod_status
      run: |
        pod_status=$(kubectl get pod -l app=frontend -o jsonpath='{.status.phase}')
        echo "::set-output name=status::$pod_status"

    - name: Check container status
      run: |
        if [[ "${{ steps.get_pod_status.outputs.status }}" == "Running" ]]; then
          echo "Container is running"
        else
          echo "Container is not running"
          exit 1
        fi