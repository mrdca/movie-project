name: Movie Project - Backend - CD
on:
  push:  # Trigger the workflow on code pushes to the main branch in the specified directory
    branches:
      - main
    paths:
      - 'starter/backend/**'
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:  # Define jobs to be executed in the workflow
  lint:  # Job for linting the code
    runs-on: ubuntu-latest  # Execute on the latest version of Ubuntu

    steps:  # Steps to be executed in the lint job
    - name: Checkout Repository  # Step to checkout the repository
      uses: actions/checkout@v4  # Use the GitHub Action to checkout the repository

    - name: Set up Python  # Step to set up Python
      uses: actions/setup-python@v2  # Use the GitHub Action to set up Python
      with:
        python-version: '3.10'  # Specify Python version to use

    - name: Install pipenv  # Step to install pipenv
      run: |
        python -m pip install pipenv  # Install pipenv using pip

    - name: Install Dependencies  # Step to install project dependencies
      run: |
        cd starter/backend  # Change directory to the backend directory
        pipenv install  # Install project dependencies using pipenv
    
    - name: Install flake8  # Step to install flake8
      run: |
        cd starter/backend  # Change directory to the backend directory
        pipenv run pip install flake8  # Install flake8 using pipenv

    - name: Lint Code  # Step to lint the code using flake8
      run: |
        cd starter/backend  # Change directory to the backend directory
        pipenv run flake8  # Run flake8 to lint the code

    - name: Lint Code (Fail Workflow on Lint Failure)  # Step to fail the workflow if linting fails
      run: |
        cd starter/backend  # Change directory to the backend directory
        pipenv run lint-fail  # Run lint-fail to check linting status
      continue-on-error: true  # Continue the workflow even if linting fails

    - name: Fail Workflow on Lint Failure  # Step to fail the workflow if linting fails
      if: ${{ failure() }}  # Condition to run this step if the previous step failed
      run: exit 1  # Exit the workflow with a failure status code

  test:  # Job for running tests
    runs-on: ubuntu-latest  # Execute on the latest version of Ubuntu

    steps:  # Steps to be executed in the test job
    - name: Checkout Repository  # Step to checkout the repository
      uses: actions/checkout@v4  # Use the GitHub Action to checkout the repository

    - name: Set up Python  # Step to set up Python
      uses: actions/setup-python@v2  # Use the GitHub Action to set up Python
      with:
        python-version: '3.10'  # Specify Python version to use

    - name: Install pipenv  # Step to install pipenv
      run: |
        python -m pip install pipenv  # Install pipenv using pip

    - name: Install Dependencies  # Step to install project dependencies
      run: |
        cd starter/backend  # Change directory to the backend directory
        pipenv install  # Install project dependencies using pipenv

    - name: Run Tests  # Step to run tests
      run: |
        cd starter/backend  # Change directory to the backend directory
        pipenv run test  # Run tests using pipenv

  build:  # Job for building the application
    runs-on: ubuntu-latest  # Execute on the latest version of Ubuntu
    needs: [lint, test]  # This ensures 'build' only runs if 'lint' and 'test' jobs succeed

    steps:  # Steps to be executed in the build job
    - name: Checkout Repository  # Step to checkout the repository
      uses: actions/checkout@v4  # Use the GitHub Action to checkout the repository

    - name: Set up Python  # Step to set up Python
      uses: actions/setup-python@v2  # Use the GitHub Action to set up Python
      with:
        python-version: '3.10'  # Specify Python version to use

    - name: Install pipenv  # Step to install pipenv
      run: |
        python -m pip install pipenv  # Install pipenv using pip

    - name: Install Dependencies  # Step to install project dependencies
      run: |
        cd starter/backend  # Change directory to the backend directory
        pipenv install  # Install project dependencies using pipenv

    - name: Install flake8  # Step to install flake8
      run: |
        cd starter/backend  # Change directory to the backend directory
        pipenv run pip install flake8  # Install flake8 using pipenv

    - name: Lint Code  # Step to lint the code using flake8
      run: |
        cd starter/backend  # Change directory to the backend directory
        pipenv run flake8  # Run flake8 to lint the code

    - name: Lint Code (Fail Workflow on Lint Failure)  # Step to fail the workflow if linting fails
      run: |
        cd starter/backend  # Change directory to the backend directory
        pipenv run lint-fail  # Run lint-fail to check linting status
      continue-on-error: true  # Continue the workflow even if linting fails

    - name: Fail Workflow on Lint Failure  # Step to fail the workflow if linting fails
      if: ${{ failure() }}  # Condition to run this step if the previous step failed
      run: exit 1  # Exit the workflow with a failure status code

    - name: Build Docker App  # Step to build Docker image
      run: |
        cd starter/backend  # Change directory to the backend directory
        docker build -t frontend .  # Build Docker image

    - name: Configure AWS credentials  # Step to configure AWS credentials for pushing Docker image to ECR
      uses: aws-actions/configure-aws-credentials@v4  # Use AWS Actions to configure AWS credentials
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Access key ID from GitHub Secrets
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secret access key from GitHub Secrets
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  # Session token from GitHub Secrets
        aws-region: us-east-1  # AWS region

    - name: Login to Amazon ECR  # Step to login to Amazon ECR
      id: login-ecr  # Unique identifier for the step
      uses: aws-actions/amazon-ecr-login@v2  # Use AWS Actions to login to Amazon ECR

    - name: Build, tag, and push image to Amazon ECR  # Step to build, tag, and push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # Environment variable for ECR registry URL
        ECR_REPOSITORY: backend  # ECR repository name
        IMAGE_TAG: ${{ github.sha }}  # Tag for the Docker image
      run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 633011985446.dkr.ecr.us-east-1.amazonaws.com  # Login to Amazon ECR
          cd starter/backend/  # Change directory to the backend directory
          docker build -t backend .  # Build Docker image
          docker tag backend:latest 633011985446.dkr.ecr.us-east-1.amazonaws.com/backend:latest  # Tag Docker image
          docker push 633011985446.dkr.ecr.us-east-1.amazonaws.com/backend:latest  # Push Docker image to Amazon ECR

    - name: Check if Docker image is uploaded to ECR
        run: |
          # Check if the Docker image exists in ECR
          if aws ecr describe-images --repository-name backend | grep -q "imageTag\": \"latest\""; then
            echo "Docker image uploaded to ECR"
          else
            echo "Docker image not uploaded to ECR, failing pipeline"
            exit 1
          fi

    - name: Install kubectl  # Step to install kubectl
      run: |
        curl -sLO https://storage.googleapis.com/kubernetes-release/release/v1.19.9/bin/linux/amd64/kubectl  # Download kubectl binary
        chmod +x ./kubectl  # Add execute permission to kubectl binary
        sudo mv ./kubectl /usr/local/bin/  # Move kubectl binary to /usr/local/bin/

    - name: Check kubectl version  # Step to check kubectl version
      run: kubectl version --client  # Run kubectl version command to check client version
        
    - name: Display kubectl help  # Step to display kubectl help
      run: kubectl help  # Run kubectl help command to display help information
    
    - name: Install Kustomize  # Step to install Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash  # Download and install Kustomize
        sudo mv kustomize /usr/local/bin/  # Move Kustomize binary to /usr/local/bin/
    

    - name: Check Kustomize version  # Step to check Kustomize version
      run: kustomize version  # Run Kustomize version command to display version information

    - name: Update AWS CLI  # Step to update AWS CLI
      run: |
        sudo apt-get install -y awscli  # Install AWS CLI
        aws --version  # Display AWS CLI version
  

    - name: Add AWS EKS cluster to kubeconfig  # Step to add AWS EKS cluster to kubeconfig
      run: |
        # Specify AWS EKS cluster details
        AWS_REGION=us-east-1  # AWS region
        EKS_CLUSTER_NAME=cluster  # EKS cluster name

        # Set the path for the kubeconfig file
        KUBECONFIG_PATH=/home/runner/.kube/config  # Path to kubeconfig file

        # Update kubeconfig with AWS EKS cluster
        aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME} --kubeconfig $KUBECONFIG_PATH
        

        # Display the updated kubeconfig content (optional, for verification)
        cat $KUBECONFIG_PATH  # Output the updated kubeconfig content

      env:
        KUBECONFIG: /home/runner/.kube/config  # Set environment variable for kubeconfig path

    - name: Check kubectl commands  # Step to check kubectl commands
      run: kubectl get pods  # Run kubectl get pods command to list pods

    - name: Deploy to EKS  # Step to deploy to EKS
      run: |
        cd starter/backend/k8s  # Change directory to the Kubernetes manifest directory
        kustomize edit set image backend=633011985446.dkr.ecr.us-east-1.amazonaws.com/backend:latest  # Update Docker image in Kubernetes manifest

    - name: Apply the manifests to the cluster  # Step to apply Kubernetes manifests to the cluster
      run: |
        cd starter/backend/k8s  # Change directory to the Kubernetes manifest directory
        kustomize build | kubectl apply -f - --validate=false  # Build and apply Kubernetes manifests, skipping validation
